input {
    beats {
    	port => 5044
    	ssl => false
  }
}

filter {
  # You can add any necessary filters here if needed
  # For example, parsing, transforming, or enriching the data.
  # If no filtering is required, you can leave this section empty.

   json {
        skip_on_invalid_json => true
        source => "message"
        add_tag => [ "_message_json_parsed" ]
        
      }
      
      
      
  date {
   match => [ "[Timestamp]", "ISO8601" ]  # Adjust to the format in your JSON if necessary
   target => "@timestamp"  # Set @timestamp to the extracted Timestamp
 }
 
 # Add the Ruby filter to handle FileType based on EntityPath and EntityType
 ruby {
    code => '
      entity_type = event.get("[EntityType]")
      entity_path = event.get("[EntityPath]")
      
      # If EntityType is "Directory", set FileType to "Directory"
      if entity_type == "Directory"
        event.set("FileType", "Directory")
      elsif !entity_path.nil? && !entity_path.strip.empty?
        # If EntityPath exists, extract the extension by splitting on the last dot
        extension = File.extname(entity_path)
        
        # Check if the extension is valid (alphanumeric only after the dot)
        if extension && extension.match(/^\.[A-Za-z0-9]+$/)
          event.set("FileType", extension[1..-1])  # Set the FileType without the dot
        else
          event.set("FileType", "Invalid File Type")  # Set to Invalid if it doesn\'t match
        end
      else
        # If EntityPath or EntityType is missing or invalid, set to Invalid File Type
        event.set("FileType", "Invalid File Type")
      end
    
      request_type = event.get("[RequestType]")
      delete_on_close = event.get("[DeleteOnClose]")

      inode_size_bytes = event.get("[InodeSizeBytes]")
      prev_security_descriptor = event.get("[PrevSecurityDescriptor]")

      # Check if DeleteOnClose exists and is true, and RequestType is "SetAttributes"
      if request_type == "SetAttributes" 
        if !delete_on_close.nil? && delete_on_close == true
          event.set("[RequestType]", "Delete")  # Modify RequestType to "Delete"
        elsif delete_on_close.nil? && !prev_security_descriptor.nil?
          # If delete on close does not exist but PrevSecurityDescriptor does, set RequestType to "Permission Changed"
          event.set("[RequestType]", "Permission Changed")
        else
          event.set("[RequestType]", "Modified")
        end
      end

      access_flags = {
                            "0x80000000" => "GENERIC_READ",
                            "0x4000000" => "GENERIC_WRITE",
                            "0x20000000" => "GENERIC_EXECUTE",
                            "0x10000000" => "GENERIC_ALL",
                            "0x02000000" => "MAXIMUM_ALLOWED",
                            "0x01000000" => "ACCESS_SYSTEM_SECURITY",
                            "0x00100000" => "SYNCHRONIZE",
                            "0x00080000" => "WRITE_OWNER",
                            "0x00040000" => "WRITE_DACL",
                            "0x00020000" => "READ_CONTROL",
                            "0x00010000" => "DELETE",
                            "0x00000001" => "FILE_LIST_DIRECTORY",
                            "0x00000002" => "FILE_ADD_FILE",
                            "0x00000004" => "FILE_ADD_SUBDIRECTORY",
                            "0x00000008" => "FILE_READ_EA",
                            "0x00000010" => "FILE_WRITE_EA",
                            "0x00000020" => "FILE_TRAVERSE",
                            "0x00000040" => "FILE_DELETE_CHILD",
                            "0x00000080" => "FILE_READ_ATTRIBUTES",
                            "0x00000100" => "FILE_WRITE_ATTRIBUTES",
                        }
        if !prev_security_descriptor.nil?
          prev_security_descriptor = JSON.parse(prev_security_descriptor) rescue {}
          event.set("[Old_Permissions]",prev_security_descriptor)
            
          # Parse the SecurityDescriptor
          security_descriptor = JSON.parse(event.get("[SecurityDescriptor]")) rescue {}
          if security_descriptor != {}
            event.set("[New_Permissions]",security_descriptor)
            dacls = security_descriptor["dacls"]
              if dacls.nil?
                    dacls = []
              end
              dacls.each_with_index do |ace, index|
                  access_mask = ace["access_mask"]
                    
                    if access_mask.nil?
                        event.set("[New_Permissions][dacls][#{index}][permissions]", ["Access mask not provided"])
                        next
                    end

                    permissions_arr = []
                    access_flags.each do |key, value|
                        # Use bitwise AND to check if the permission bit is set
                        if access_mask & Integer(key, 16) != 0
                            permissions_arr.push(value)
                        end
                    end
                    # If no permissions were found, add "No permissions"
                    permissions_arr = ["No permissions"] if permissions_arr.empty?

                    # Add the human-readable permissions to the event
                    event.set("[New_Permissions][dacls][#{index}][permissions]", permissions_arr.join(", "))
              end
          end
      end
  '
}


    
  mutate {
        remove_field => ["offset", "prospector","@version","source","host","beat","log","input","[event][original]"]
      }    



fingerprint {
  source => "message"
  target => "[@metadata][fingerprint]"
  method => "MD5"
  key => "test"
  }

}

output {
  opensearch {
    hosts => ["https://os01:9200"] 
  	user => "admin"
  	password => "admin"
    ssl => true
  	ssl_certificate_verification => false
    index => "file-audit-logs-%{+YYYY.MM.dd}"   # Index name format
    document_id => "%{[@metadata][fingerprint]}"


  }

  # Optional: Output to stdout for debugging/logging purposes
  stdout {
    codec => rubydebug
  }
}
