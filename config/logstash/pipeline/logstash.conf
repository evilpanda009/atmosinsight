input {
    beats {
    	port => 5044
    	ssl => false
  }
}

filter {
  # You can add any necessary filters here if needed
  # For example, parsing, transforming, or enriching the data.
  # If no filtering is required, you can leave this section empty.

   json {
        skip_on_invalid_json => true
        source => "message"
        add_tag => [ "_message_json_parsed" ]
        
      }
      
      
      
  date {
   match => [ "[Timestamp]", "ISO8601" ]  # Adjust to the format in your JSON if necessary
   target => "@timestamp"  # Set @timestamp to the extracted Timestamp
 }
 
 # Add the Ruby filter to handle FileType based on EntityPath and EntityType
 ruby {
    code => '
      entity_type = event.get("[EntityType]")
      entity_path = event.get("[EntityPath]")
      
      # If EntityType is "Directory", set FileType to "Directory"
      if entity_type == "Directory"
        event.set("FileType", "Directory")
      elsif !entity_path.nil? && !entity_path.strip.empty?
        # If EntityPath exists, extract the extension by splitting on the last dot
        extension = File.extname(entity_path)
        
        # Check if the extension is valid (alphanumeric only after the dot)
        if extension && extension.match(/^\.[A-Za-z0-9]+$/)
          event.set("FileType", extension[1..-1])  # Set the FileType without the dot
        else
          event.set("FileType", "Invalid File Type")  # Set to Invalid if it doesn\'t match
        end
      else
        # If EntityPath or EntityType is missing or invalid, set to Invalid File Type
        event.set("FileType", "Invalid File Type")
      end
    
      request_type = event.get("[RequestType]")
      delete_on_close = event.get("[DeleteOnClose]")

      # Check if DeleteOnClose exists and is true, and RequestType is "SetAttributes"
      if request_type == "SetAttributes" && !delete_on_close.nil? && delete_on_close == true
        event.set("[RequestType]", "Delete")  # Modify RequestType to "Delete"
      end

      inode_size_bytes = event.get("[InodeSizeBytes]")
      prev_security_descriptor = event.get("[PrevSecurityDescriptor]")

      if request_type == "SetAttributes"
        if !inode_size_bytes.nil?
          # If InodeSizeBytes exists, set RequestType to "Modified"
          event.set("[RequestType]", "Modified")
        elsif !prev_security_descriptor.nil?
          # If InodeSizeBytes does not exist but PrevSecurityDescriptor does, set RequestType to "Permission Changed"
          event.set("[RequestType]", "Permission Changed")
        end
      end
  '
}
    
  mutate {
        remove_field => ["offset", "prospector","@version","source","host","beat","log","input","[event][original]"]
      }    



fingerprint {
  source => "message"
  target => "[@metadata][fingerprint]"
  method => "MD5"
  key => "test"
  }

}

output {
  opensearch {
    hosts => ["https://os01:9200"] 
  	user => "admin"
  	password => "admin"
    ssl => true
  	ssl_certificate_verification => false
    index => "file-audit-logs-%{+YYYY.MM.dd}"   # Index name format
    document_id => "%{[@metadata][fingerprint]}"


  }

  # Optional: Output to stdout for debugging/logging purposes
  stdout {
    codec => rubydebug
  }
}
